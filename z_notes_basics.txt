                    ARRAYS: 

    C++: (array = static array(size needs to be declared as well), vector = dynamic array)

-> declaration: 
    int arr1[5] = {1, 2,}; (remaining 3 elements initialized to 0) 
    int arr2[5] = {0}; (All elements initialized to 0)
    vector<int> arr4; 
    vector<int> arr5(8,0); (vector of initial size =  & all elements = 0)

-> loop: 
    for(int i=0; i<n; i++){}
    for(int n: arr){}
    for(auto x: arr2){}

-> built-in methods:
    sort(arr.begin(), arr.end());  // or the iterators; ie, sort(arr, arr+5) will sort first 5 elements
    reverse(arr.begin(), arr.end());
    int max = *max_element(arr.begin(), arr.end());
    .push_back(); .pop_back(), .back(), 

    JS: (array is always dynamic)

-> declaration:
    let arr1 = [1, 2, 3, 4];
    let arr2 = new Array(1, 2, 3);
    let arr2 = new Array(8).fill(0); //creates array of initial size = 8 & all elements = 0

-> loop: 
    for (let i = 0; i < arr.length; i++) {}
    for (let value of arr) {}
    arr.forEach((value, index) => console.log(index, value));

-> built-in methods:
    arr.sort();
    arr.reverse();  
    .push(); .pop(); .unshift(newEl) (Adds new element at 0th index & shifts other elements to 1 step right); .shift() (removes element at 0th index and moves other elements to 1 step left); .indexOf(element); .includes(x); 
    
    array.slice(startIndex, endIndex): extracts elements from startIndex(inclusive) to endIndex(exclusive) without modifying the original array. Ex. ar = [0,1,2,3,4]; const v = ar.slice(2,5) => v = [2,3,4]

    array.splice(startIndex, deleteCount, item1, item2, ..., itemN): modifies original array by removing deleteCount no. of elements starting from index startIndex and replaces them with item1, item2....

-> arrays can be used to create 'stack' (LIFO)

...........................................................................................................
                    
                    MAPS

-> key:value pairs are stored (keys must be unique)
-> array is used behinfd the scenes, key:value pair is hashed to link it with index of array where it needs to be put. Collisions, chaining, open addressing 
-> access/insert/delete:  O(1) in avg. case (but can get to O(n) in rare worst case)

        C++:

-> declaration: unordered_map<int, string> map1; // Key: int, Value: string

-> built-in methods: 
    .erase(key), access: map1[key], insert: map1.insert({2, "Banana"}); or map1[2] = "Banana" ;
    map1.find(key) != map1.end() => key exists

-> Loop: for(auto pair : map1){ pair.first; pair.second }; .first = key, .second = value

        JS:

-> declaration: let map = new Map();

-> built-in methods: map.set(1, "Apple"); map.delete(key); map.has(key); map.size(); 

-> Loop: map.forEach((value, key) => {  })  OR for (let [key, val] of map) {}

-> object can be used in place of map but it would have certain limitations (no size method, overwrite values, etc.)

                    SETS (very similar to map and has same methods)

-> collection of unique values (no duplicates allowed) 
-> access/insert/delete:  O(1) in avg. case (but can get to O(n) in rare worst case)

        C++:

-> declaration: unordered_set<int> set1; 


-> built-in methods: set1.insert(10); set1.erase(10); set1.find(20) != set1.end(); set1.size(); for(auto val : set1) cout<<val; 

        JS:

-> declaration: let set = new Set();

-> built-in methods: set.add(10); set.delete(10); set.has(20); set.size; set.forEach((value) => {
  console.log(value)})
  
...........................................................................................................

                    LINKED LISTS: 

    SINGLY LL:

-> Each node has a value & a next pointer which points(reference) to the next node
-> head = 1st node of LL; tail = last node of LL
-> inserting/removing node from begining/end => TC = O(1) but searching for a node = O(n)
-> inserting/removing node from middle => TC = O(1) (not counting TC of iterating to that node)
-> We can implement Queue (FIFO) using LL (removing at head)

    C++: 

-> Has built-in LL data structure: list<int> myList = {1, 4, 3};  // 1->4->3

-> built-in methods: 
    .push_front(val); .push_back(val); .pop_front(); .pop_back(); .insert(iterator, val);
    .erase(iterator/position); .size(); .clear(); .empty(); .sort(); .reverse()

    JS:

-> no built-in LL but array can be used (since, it has methods such as .unshift(), .shift() (althought, there TC: O(n))) but we can do custom implementation using classes whenever required.

Q2c: Reverse the LL.
-> Take 3 pointers: prev (=null), curr (=head) & fwd (=null); while(curr): fwd = curr.next; curr.next = prev; prev = curr; curr = fwd;    return prev 

Q2d: Merge 2 sorted lists and make a single sorted list out of them and return its head. 
-> Take a dummyNode(next = null) & tail = dummyNode; while(h1 && h2){ if(h1.val >= h2.val) tail->next = h2, h2 = h2->next, tail = tail->next;  else tailNode->next = h1, h1 = h1->next, tail = tail->next  }; 
while(h1) tail = h1, h1 = h1->next, tail = tail->next;  while(h2) tail = h2, h2 = h2->next, tail = tail->next; return dummy->next; 

Q2e: Design linked list with methods: get(index), addAtHead(val), addAtTail(val), addAtIndex(index, val), deleteAtIndex(index).
-> Node class: val & next pointer; LinkedList class: left(head) pointer & size and contains the above methods.

Q2f: Design Browser history with methods to go to prev and next pages/urls. 
-> Use DLL (using stack/dynamic array is more efficient bcoz for going back/fwd n pages-> TC: DLL->O(N) but stack/array-> O(1)).

...........................................................................................................

                    STACKS:
                
->  