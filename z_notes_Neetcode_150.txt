        Arrays & Hashing:

(1) Return true if any value in array appears atleast twice ; else return false.
-> S1: use set: TC: O(n), SC: O(n); S2: sort & traverse the array: TC: O(nlogn), SC: O(1)

(2) Valid Anagram: given two strings, return true if they are anagrams of each other (anagrams = words formed by rearranging the letters, ex. abcd & bdac)
-> S1: use map: TC: O(n), SC: O(n); S2: sort the 2 strings & traverse them simultaneouly: TC: O(nlogn)

(3) Two Sum: return the indeces of two nos. in the array which sum up to 'target'. (Note: There will be exactly 1 correct pair for each input).
-> While traversing the array, use a map; if(target-nums[i]) is in map, return {i, mp[target-nums[i]]}, else mp[nums[i]] = i; TC: O(n), SC: O(n)

(4) Group Anagrams: Given an array of strings, group the anagrams together & return ans as vector of vectors where each vector stores all anagrams of a type. Ex. Input: strs = ["eat","tea","tan","ate","nat","bat"]; Output: [["bat"],["nat","tan"],["ate","eat","tea"]]
-> S1: use map along with sorting: TC: O(k*nlogn) where k = no.of strings, n = length of longest string; SC: O(n);
    let map = new Map()
    for(let str of strs){
        let sorted = str.split('').sort().join('')
        if(!map.has(sorted)) map.set(sorted, [str])
        else map.get(sorted).push(str)
    }
    return Array.from(map.values()) 

(5) Product of array except self: given an int array nums, return an ans array such that ans[i] =  product of all the elements of nums except nums[i]. (You cannot use division operator)
-> ans[i] = prefixProduct[i] * postfixProduct[i]; First traversal: store prefix product for each index; 2nd traversal(r->l): multiply the postfix product at curr index and store the updated postfix product. TC: O(n)

(6) Valid Sudoku: Given a 2-D 9*9 array of characters where each character is an no. b/w [1,9] or is '.' (which implies empty). Return false if any row has a repeating no. OR if any col has a repeating no. OR if any 3*3 sub-box(there are 9 subboxes, see diagram) has a repeating no. 
-> create total 27 sets: 9 sets -> for 1 row each; 9 sets -> for 1 col each; 9 sets -> 1 for each 3*# subbox. subboxes can be uniquely identified by their index [0,8]. where index of a box can be found by formula : (r/3)*3 + (c/3) (subboxes can be categorized vertically into 3 sections: Top, middle, bottom: r/3 = 0 => top, r/3 = 1 => middle, r/3 = 2 => bottom; similarly, subboxes can be categorized horizontally into 3 sections: Left, middle, right: so c/3; now multiply any one of them by 3 & adding them will give each subbox a unique index b/w [0,8]).   

(7) Longest consecutive Subsequence: Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence (ex. 4,5,6,7). You must write an algorithm that runs in O(n) time.
-> Simple soultion is to sort the array & traverse; but TC: O(nlogn); create a set & put all the values in array into the set. now while traversing the array, check if set has (no.-1), if yes continue to next no. (bcoz this means that curr no. is not the start of its subsequence); else { while(set.has(no.+1)){ no.++; len++ }; ans = max(ans, len) } ; TC: O(n), SC: O(n)

(8) 
...........................................................................................................

                TWO POINTERS:

(9) Valid Palindrome: check if given sentence is a palindrome after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters.
-> let l = 0, r = n-1
    let st = s.toLowerCase()
    while(l<=r){
        while(l<n && !/^[a-zA-Z0-9]$/.test(st[l])) l++  //if(not alphanumeric, skip)
        while(r>=0 && !/^[a-zA-Z0-9]$/.test(st[r])) r--
        if(st[l] !== st[r]) return false
        l++
        r--
    }
    return true

(10) Two Sum 2 (sorted array) : given a sorted array, return the indeces of the two values which sum up to 'target'. (Be assured that there will be exactly 1 solution).
->l=0, r=n-1; while(l<r){ of arr[l]+arr[r]<target -> l++; else if >target -> r--; else return {l,r} }

(11) 3 Sum: Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that nums[i] + nums[j] + nums[k] == 0 and i!=j!=k.
-> Sort the array; now traverse the array and create 2 pointers: l = i+1, r = n-1; while(l<r){ if(nums[i]+nums[l]+nums[r] (ie,sum) == 0){ ans.push_back(nums[i], nums[l], nums[r]); l++; while(l<r && nums[l-1] == nums[l]) l++; }; else if(sum<0) l++; else r-- };

NOTE: in js, .sort() method performs lexograhic sort (& not numerical sort); so to sort nos. in ascending order: nums.sort((a, b) => a - b);

(12) Container With Most Water: You are given an arr: height, where you have to assume a line corresponding to each value of array with 2 enpoints of line being: (i, 0) & (i, height[i]). Return the maximum amount of water a container can store (image attached).
-> water stored in container = (r-l) * min(height[l], height[r])  
        int l=0, r=height.size()-1, ans = 0;
        while(l<r){
            int h = min(height[l], height[r]);
            int w = r-l;
            ans = max(ans, h*w);
            if(height[l] < height[r]) l++;
            else r--;
        }
        return ans;

(13) Trapping Rain Water: given an array: "height" where each element represents height of the building, each building has width = 1 and all buildings are in-line with gap of 1 each. compute how much water it can trap after raining.(see figure)
-> vol. of water trapped on top of a particular building(at 'i'th index) = min(max building height on left side of this building, max building height on right side of this building) - height[i] (if this is -ve, take it as 0);
So, two pointers solution: take l=0, r=arr.size()-1, maxL=height[l], maxR=height[r]; while(l<r){ if(maxL<=maxR){ l++, maxL=max(maxL, height[l]), ans+= maxL-height[l] ; else r--, maxR=max(maxR, height[r], ans+= maxR-height[r]) } } return ans; 

...........................................................................................................

                Stacks:

(14) Valid Parentheses: Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid mathematically.
-> Logic: on moving L->R, whenever we encounter a closing bracket, the first(closest) opening bracket on its left must be its corresponding opening bracket.
Sol: create a stack, while traversing L->R, if curr = opening bracket(of any kind), put it into the stack, else: if it is a closing bracket, st.top() must be its corresponding opening bracket, if so, st.pop() & continue, else return false; finally(after traversal is successfully complete); if stack is empty => ans = true, else false(bcoz that means some opening brackets do not have a closing bracket).

(15) Design Min Stack: design a stack which supports methods: push(), pop(), top() as done by a stack; but it should also support getMin() method which returns the min val in the stack. All methods must be of O(1) TC.
-> JS Sol: Take 2 arrays -> stack & minStack; while pushing a new val in stack, push corresponding min val(including curr val) in minStack.  

(16) Evaluate Reverse Polish Expression: RPE => array contating nos. and operands are give and each operand applies to last 2 nos. on left of the operand. Evaluate the array and return the ans val.
Ex. ["2","1","+","3","*"] =>  ((2 + 1) * 3) = 9 ans
-> use Stack, while traversing array, if(ar[i] = any operand) -> pop out last two vals from stack and apply that operation b/w them & then push back the new val achieved into rh stack; else(ie, if ar[i] = a no.), push it into the stack. 

(17) Daily Tempeartures: given a 'Temps' array, create an ans array such that for each val in Temps array, ans[i] = index - i where index = smallest index for which Temps[index] > Temps[i], (ie, smallest distance on right for which temp. is larger than curr temp); if no such index -> ans[i] = 0.
-> Monotonically Decreasing(non-inc.) Stack; while traversing Temps, while(st.top().first < Temps[i]){ ans[st.top().second] = i - st.top().second(); st.pop() } st.push(Temps[i], i);    //st.top().first = Temps[i], st.top().second = i.  

(18) Car Fleet: given an int 'target' & 2 arrays: position & speed where position[i] = starting position of car i & speed[i] = speed of car i; whenever 2 cars meet (before or exactly at target), they start moving together (with speed of both = min(speed1, speed2)). Find the no. of car fleets that will arrive at target. (a car fleet = a jhund of cars that arrive together at target). 
-> combine the position & speeds array into -> vector<pair<int, float>> where pair[i].first = position[i], pair[i].second = time (ie, float(target-position[i])/speed[i]); ie, time taken by car i to reach target if its speed remains same as starting speed. Now, sort this wrt position (descending). 2 cars meet => car starting at behind position catches up with car starting at ahead position & after meet, speed of car initially behind reduces to speed of car initially ahead (ie, Tbehind becomes = to Tahead). Create a stack & while traversing the pair vector: if(st.empty() || st.top() < pair[i].second){ st.push(pair[i].second) } return st.size();

(19) Largest Rectangle In Histogram: Given an array of integers 'heights' representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram. (See figure)
-> While traversing the arr, max. height of rect which includes heights[i] = heights[i]; now the widht of this rectangle will be equal to how much can we extend it , ie, we can extend a rectangle of height = heights[i] (from heights[i]) in right side untill we encounter a bar with heights[j] < heights[i]; similarly on the left side, we can extend it untill we encounter a bar with heights[k] < heights[i]; So we need to find k & j (ie, width = j-k-1); ie, for each bar, we need to find pse(prev. smaller element) index(ie, k) & nse(next smaller element) index(ie, j). 
We use stack & vector<int> pse(n,-1) and traverse heights[i] l->r; while (!st.empty() && heights[i] < heights[st.top()]) st.pop(); if(!st.empty()) pse[i] = st.top(); (else pse[i] = -1, ie, default val).
similarly, vector<int> nse(n,n) & traverse r->l. now traverse l->r and ans = max(ans, heights[i] * (nse[i] - pse[i] - 1)); TC: O(n), SC: O(n)

(20) Generate Parentheses: 

...........................................................................................................

                BINARY SEARCH:

(21) BS1: given a sorted array & 'target'; return the index of target in arr; if target not present in arr, return -1.
-> l=0, r=n-1; while(l<=r) int m = l + (r-l)/2; if(arr[m] > target) r = m-1; else if(<) l = m+1; else return m;   return -1;

(22) Search in Sorted 2D Matrix: Given a 2D matrix with all rows as well as all cols sorted. Given an integer target, return true if target is in matrix or false otherwise.
-> Simple solution is to apply BS on each row one-by-one: TC: O(r*logc). 
Since, both rows & cols are sorted, we can treat it as a 1-D sorted array of size r*c by assuming to put all rows in 1 line. Now, if we apply BS, TC: O(r*c). So, s = 0, e = r*c-1 & m = s +(e-s)/2. And we can get rowNo. = m/c & colNo. = m%c. 

(23) Koko Eating Bananas: given an array 'piles' where piles[i] = no. of bananas in ith pile & an int 'h'. Find the minimum speed with which koko should eat bananas(no.of bananas/hour) such that she eats all bananas within 'h' hours. Note: if she finishes all bananas in a pile within an hour, she cannot move to next pile untill the current hour is complete.
-> min speed = 1(banana/hour), max speed = Math.max(...piles). so l = 1, r = Math.max(...piles). for each m(m = speed), calculate time req. to eat all bananas: for(auto x: piles) timeReq+= Math.ceil(x/m); if(timeReq > h) l = m+1; else { ans = m; r = m-1 } ; TC: O(nlog(maxElement in piles)).

(24) Find Min. In Rotated Sorted Array: Given the sorted rotated array nums of unique elements, return the minimum element of this array.
-> Rotated Sorted Array => 2 portions(left and right) which are separately sorted. ex. [4,5,6,7,1,2]: => left portion = [4,5,6,7] & right = [1,2]. So, min = min(nums[0], nums[j]) where j = index just after inflection point. here nums[j] = 1 & hence ans = 1. now, l=0, r = nums.size(), ans = nums[0]; while(l<=r){
3 possible cases: (1) array is completely sorted:  if(nums[l]<nums[r]) return min(ans, nums[m]) }; (2) nums[l] < nums[m] => we're(ie, m is)  in left portion, so now move to right portion(since, we already have min. val. in left portion), so now, l = m+1; (3) nums[l] > nums[m] => we're(ie, m is) in right portion, so now move to left portion.

(25) Search in Rotated Sorted Array: given a RSA & an int 'target', find it and return its index in arr; if target not present in arr, return -1
-> l=0, r = nums.size; if(nums[m] == target) return m; if (nums[m] >= nums[l]) => we're in left part(l to m); if ( nums[l]>=target>=nums[m]) => target is also in this range(l to m), so r=m-1; else move to right part, ie, l=m+1; else (//ie, if we're in right part(m to r); if(nums[m]>=target>=nums[r] => target is also in this range(m to r), so l = m+1, else r = m-1)); return -1 

(26) Design Map-Like Data Structure: design a data structure which can hold key: values pair (1 key can hold multiple values) & each value is a pair<string, int> : {val, timestamp}. Write 2 methods: (1)set(key, val, timestamp): to store the val & timestamp corresponding to the key; & (2) get(key, timestamp): which returns corresponding val, if key is not their, return ""; if timestamp is not their, then return val corresponding to the largest imestamp corresponding to this key <= input timestamp. Note: be assured that all the timestamps corresponding to a key will be in increasing order.
-> JS: Use map() & store {k1: [[v1,t1], [v2,t2]]} in get method, to find correct [v, t] pair, apply BS on it; for set method: if(!this.map.has(key)) this.map.set(key, []); this.map.get(key).push([value, timestamp]); For get method: if(!this.map.has(key)) return ''; let ans = ""; const values = map.get(key); let l=0, r=values.length-1; while(l<=r){ let m = Math.floor(l + (r-l)/2); if(values[m][1] <= timestamp){ 
ans = values[m][0]; l = m+1} else r = m-1 } return ans;     
For C++: use map<string, vector<pair<string, int>>>;

(27) Median of 2 Sorted Arrays: Given 2 sorted arrays(sizes n1 & n2), find the median of the merged sorted array.
-> Simple Sol: create another array, which is merged sorted version of the 2 given arrays and return the middle element( if total elements = odd), else return avg. of 2 middle elements.
BS Sol: Median element will divide the merged sorted array in 2 equal halfs (ie, left portion size = right portion size). This left protion will be created by combination of left portions of the two arrays (ex. left portion has x1 elements of arr1: ie, arr1[0, x1-1] & remaining(ie, half - x1) elements from arr2: ie, arr2[0, half - x1] (where half = (n1+n2)/2)). Lets apply BS on arr1: e=0, e=n1, half = (n1+n2)/2; while(s<=e){ int m1 = s+ (e-s/2); (note: m1 != mid index, but count of no. of elements of arr1 which we assume to be part of left portion of merged sorted array); int m2 = half-m1; int l1,l2 =INT_MIN(l1 = last element of arr1 which is in left portion;); int r1,r2 = INT_MAX(r1 = first element of arr1 which is in right portion); if(m1>0 (ie, there is atleast 1 element of arr1 in left portion){ l1 = nums[m1-1] }) if(m2>0) l2 = nums[m2-1]; if(m1<n1) (ie, if there is atleast 1 element of arr1 in right portion){ r1 = nums[m1] }; if(m2<n2) r2 = nums[m2];  } now, if(l1>r2) (ie => merged array is unsorted(right portion element > lpe)){ e=m1-1 }; else if(r1>l2){ s=m1+1 }; else (ie, valid MSA){ if ((n1+n2) % 2 == 1) return max(l1, l2); (ie, if total no. of elements = odd -> median = ) else return ((double)(max(l1, l2) + min(r1, r2))) / 2.0; } 
TC: O(n1) (if n1>n2), we should apply BS on arr2: so, TC: O(min(n1,n2)); [see js code]

...........................................................................................................

                SLIDING WINDOW:

(28) Buy Sell Stocks: given a prices array where prices[i] = prices of stock on ith day. Return the maximum profit one can earn by buying a stock ont jth day & selling it on kth day (j<k). Retrun 0 if no chance of making profit.
-> int cost = prices[i], int profit = 0; for(auto x: prices){ profit = max(profit, x-cost); cost = min(cost, x) } return profit

(29) Longest Substring without Repeating Char: Given a string s, find the length of the longest substring without repeating characters.
-> set<char> st; int l=0, ans = 0; for(int r=0; r<s.size(); r++){ if(st.find(s[r] == st.end()) st.insert(x)); else{ while(s[l] != s[r]) st.erase(s[l]; l++) } ans = max(ans, r-l+1);}  return ans

(30) Longest Repeating Char Replacement: Given a string s (containing only uppercase chars.) & int k; You can choose atmost k chars in s & replace them with any other uppercase char. Return the length of the longest substring containing the same letter.
-> for a window, no. of replacements req = window size - count of freq. of maxFreq. element in the wondow; ie, = (r-l+1) - maxi; If this is <=k, then it is a valid window, else we will move l->l++ untill the window becomes a vaild window.
vector<int> freq(26,0) int l=0; for(r=0 to s.size()-1){ freq[s[r]-'A']++; int maxi = *max_element(freq.begin(), freq.end()); while((r-l+1) - maxi > k){ freq[s[l]-'A']--; l++ } ans = max(ans, r-l+1) } return ans; TC: O(26*n) = O(n)

(31) Permutation in String: Given two strings s1 and s2, return true if a substring of s2 is a 
permutation of s1, or false otherwise.
-> use 2 freq arrays(26,0); use a sliding window of fixed size: s1.size(); and check if count of all chars in s2's substring = s1's chars count. vector<int> ar1(26,0) , ar2(26,0); for(int i=0; i<s1.size(); i++) ar1[s1-'a']++, ar2[s2-'a']++; for(int i=0; i<25; i++){ if(ar1[i] == ar2[i]) matches++ }; int l=0; for(int r=s1.size(); r<s2.size(); r++){ if(matches == 26) return true; int ind1 = s2[r] - 'a'; ar2[ind1]++; if(ar2[ind1] == ar1[ind1]) matches++; else if(ar2[ind1] == ar1[ind1] + 1) matches--; int ind2 = s2[l]  - 'a'; ar2[ind2]--; if(ar1[ind2] == ar2[ind2]) matches++; else if(ar1[ind2] - 1 == ar2[ind2]) matches--; l++;} return matches == 26; TC: O(n2); 

(32) Minimum Window Substring: Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates counts) is included in the window. If there is no such substring, return the empty string "".
-> Use two <char, int> maps: mapS: to store freq. of all chars in ss window of s, mapT: to store freq. of all chars in t; use two ints: reqMatches: (ie, = no. of unique chars in t , ie, = mapT.size()) & charMatches: to store count of no. of chars for which freq. in matching; l=0; for(r=0 to s.size()){ mapS[s[r]]++; if(mapS[s[r]] == mapT[s[r]]){ charMatches++ } while(charMatches == reqMatches){ if(r-l+1 < ansLen){ansLen = r-l+1; ansL = l, ansR = r; } mapS[s[l]]--; if(mapS[s[l]] == mapT[s[l]] - 1) charMatches--; l++ } } if ansL == -1 return ""; else ans = ""; for(i = ansL to ansR) ans+= s[i]; return ans;

(33) Sliding Window Max: given an int arr 'nums' & an int k. return an arr which stores the max value in each window of size k in nums.
-> Use Monotonically Decreasing Deque: for(int i=0; i<n; i++){ while(!dq.empty() && nums[i] >= nums[dq.back()]) dq.pop_back(); (//ie, while moving l->r, all those on left of i which are < nums[i] cannot be ans[i or idx >i]) dq.push_back(i); if(dq.front() < i+1-k) dq.pop_front(); (//ie, if window size = k+1, remove leftmost index from window); if(i >= k-1) ans.push_back(nums[dq.front()]); (//ie, if window size = k, nums[dq.front()] = max val in window)} return ans;  TC: O(n), SC: O(n)

...........................................................................................................

                LINKED LISTS:

(34)  