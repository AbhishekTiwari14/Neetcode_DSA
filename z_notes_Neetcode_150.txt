        Arrays & Hashing:

(1) Return true if any value in array appears atleast twice ; else return false.
-> S1: use set: TC: O(n), SC: O(n); S2: sort & traverse the array: TC: O(nlogn), SC: O(1)

(2) Valid Anagram: given two strings, return true if they are anagrams of each other (anagrams = words formed by rearranging the letters, ex. abcd & bdac)
-> S1: use map: TC: O(n), SC: O(n); S2: sort the 2 strings & traverse them simultaneouly: TC: O(nlogn)

(3) Two Sum: return the indeces of two nos. in the array which sum up to 'target'. (Note: There will be exactly 1 correct pair for each input).
-> While traversing the array, use a map; if(target-nums[i]) is in map, return {i, mp[target-nums[i]]}, else mp[nums[i]] = i; TC: O(n), SC: O(n)

(4) Group Anagrams: Given an array of strings, group the anagrams together & return ans as vector of vectors where each vector stores all anagrams of a type. Ex. Input: strs = ["eat","tea","tan","ate","nat","bat"]; Output: [["bat"],["nat","tan"],["ate","eat","tea"]]
-> S1: use map along with sorting: TC: O(k*nlogn) where k = no.of strings, n = length of longest string; SC: O(n);
    let map = new Map()
    for(let str of strs){
        let sorted = str.split('').sort().join('')
        if(!map.has(sorted)) map.set(sorted, [str])
        else map.get(sorted).push(str)
    }
    return Array.from(map.values()) 

(5) Product of array except self: given an int array nums, return an ans array such that ans[i] =  product of all the elements of nums except nums[i]. (You cannot use division operator)
-> ans[i] = prefixProduct[i] * postfixProduct[i]; First traversal: store prefix product for each index; 2nd traversal(r->l): multiply the postfix product at curr index and store the updated postfix product. TC: O(n)

(6) Valid Sudoku: Given a 2-D 9*9 array of characters where each character is an no. b/w [1,9] or is '.' (which implies empty). Return false if any row has a repeating no. OR if any col has a repeating no. OR if any 3*3 sub-box(there are 9 subboxes, see diagram) has a repeating no. 
-> create total 27 sets: 9 sets -> for 1 row each; 9 sets -> for 1 col each; 9 sets -> 1 for each 3*# subbox. subboxes can be uniquely identified by their index [0,8]. where index of a box can be found by formula : (r/3)*3 + (c/3) (subboxes can be categorized vertically into 3 sections: Top, middle, bottom: r/3 = 0 => top, r/3 = 1 => middle, r/3 = 2 => bottom; similarly, subboxes can be categorized horizontally into 3 sections: Left, middle, right: so c/3; now multiply any one of them by 3 & adding them will give each subbox a unique index b/w [0,8]).   

(7) Longest consecutive Subsequence: Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence (ex. 4,5,6,7). You must write an algorithm that runs in O(n) time.
-> Simple soultion is to sort the array & traverse; but TC: O(nlogn); create a set & put all the values in array into the set. now while traversing the array, check if set has (no.-1), if yes continue to next no. (bcoz this means that curr no. is not the start of its subsequence); else { while(set.has(no.+1)){ no.++; len++ }; ans = max(ans, len) } ; TC: O(n), SC: O(n)

(8) 
...........................................................................................................

                TWO POINTERS:

(9) Valid Palindrome: check if given sentence is a palindrome after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters.
-> let l = 0, r = n-1
    let st = s.toLowerCase()
    while(l<=r){
        while(l<n && !/^[a-zA-Z0-9]$/.test(st[l])) l++  //if(not alphanumeric, skip)
        while(r>=0 && !/^[a-zA-Z0-9]$/.test(st[r])) r--
        if(st[l] !== st[r]) return false
        l++
        r--
    }
    return true

(10) Two Sum 2 (sorted array) : given a sorted array, return the indeces of the two values which sum up to 'target'. (Be assured that there will be exactly 1 solution).
->l=0, r=n-1; while(l<r){ of arr[l]+arr[r]<target -> l++; else if >target -> r--; else return {l,r} }

(11) 3 Sum: Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that nums[i] + nums[j] + nums[k] == 0 and i!=j!=k.
-> Sort the array; now traverse the array and create 2 pointers: l = i+1, r = n-1; while(l<r){ if(nums[i]+nums[l]+nums[r] (ie,sum) == 0){ ans.push_back(nums[i], nums[l], nums[r]); l++; while(l<r && nums[l-1] == nums[l]) l++; }; else if(sum<0) l++; else r-- };

NOTE: in js, .sort() method performs lexograhic sort (& not numerical sort); so to sort nos. in ascending order: nums.sort((a, b) => a - b);

(12) Container With Most Water: You are given an arr: height, where you have to assume a line corresponding to each value of array with 2 enpoints of line being: (i, 0) & (i, height[i]). Return the maximum amount of water a container can store (image attached).
-> water stored in container = (r-l) * min(height[l], height[r])  
        int l=0, r=height.size()-1, ans = 0;
        while(l<r){
            int h = min(height[l], height[r]);
            int w = r-l;
            ans = max(ans, h*w);
            if(height[l] < height[r]) l++;
            else r--;
        }
        return ans;

(13) Trapping Rain Water: given an array: "height" where each element represents height of the building, each building has width = 1 and all buildings are in-line with gap of 1 each. compute how much water it can trap after raining.(see figure)
-> vol. of water trapped on top of a particular building(at 'i'th index) = min(max building height on left side of this building, max building height on right side of this building) - height[i] (if this is -ve, take it as 0);
So, two pointers solution: take l=0, r=arr.size()-1, maxL=height[l], maxR=height[r]; while(l<r){ if(maxL<=maxR){ l++, maxL=max(maxL, height[l]), ans+= maxL-height[l] ; else r--, maxR=max(maxR, height[r], ans+= maxR-height[r]) } } return ans; 

...........................................................................................................

                Stacks:

(14) Valid Parentheses: Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid mathematically.
-> Logic: on moving L->R, whenever we encounter a closing bracket, the first(closest) opening bracket on its left must be its corresponding opening bracket.
Sol: create a stack, while traversing L->R, if curr = opening bracket(of any kind), put it into the stack, else: if it is a closing bracket, st.top() must be its corresponding opening bracket, if so, st.pop() & continue, else return false; finally(after traversal is successfully complete); if stack is empty => ans = true, else false(bcoz that means some opening brackets do not have a closing bracket).

(15) Design Min Stack: design a stack which supports methods: push(), pop(), top() as done by a stack; but it should also support getMin() method which returns the min val in the stack. All methods must be of O(1) TC.
-> JS Sol: Take 2 arrays -> stack & minStack; while pushing a new val in stack, push corresponding min val(including curr val) in minStack.  

(16) Evaluate Reverse Polish Expression: RPE => array contating nos. and operands are give and each operand applies to last 2 nos. on left of the operand. Evaluate the array and return the ans val.
Ex. ["2","1","+","3","*"] =>  ((2 + 1) * 3) = 9 ans
-> use Stack, while traversing array, if(ar[i] = any operand) -> pop out last two vals from stack and apply that operation b/w them & then push back the new val achieved into rh stack; else(ie, if ar[i] = a no.), push it into the stack. 

(17) Daily Tempeartures: given a 'Temps' array, create an ans array such that for each val in Temps array, ans[i] = index - i where index = smallest index for which Temps[index] > Temps[i], (ie, smallest distance on right for which temp. is larger than curr temp); if no such index -> ans[i] = 0.
-> Monotonically Decreasing(non-inc.) Stack; while traversing Temps, while(st.top().first < Temps[i]){ ans[st.top().second] = i - st.top().second(); st.pop() } st.push(Temps[i], i);    //st.top().first = Temps[i], st.top().second = i.  

(18) Car Fleet: given an int 'target' & 2 arrays: position & speed where position[i] = starting position of car i & speed[i] = speed of car i; whenever 2 cars meet (before or exactly at target), they start moving together (with speed of both = min(speed1, speed2)). Find the no. of car fleets that will arrive at target. (a car fleet = a jhund of cars that arrive together at target). 
-> combine the position & speeds array into -> vector<pair<int, float>> where pair[i].first = position[i], pair[i].second = time (ie, float(target-position[i])/speed[i]); ie, time taken by car i to reach target if its speed remains same as starting speed. Now, sort this wrt position (descending). 2 cars meet => car starting at behind position catches up with car starting at ahead position & after meet, speed of car initially behind reduces to speed of car initially ahead (ie, Tbehind becomes = to Tahead). Create a stack & while traversing the pair vector: if(st.empty() || st.top() < pair[i].second){ st.push(pair[i].second) } return st.size();

(19) Largest Rectangle In Histogram: Given an array of integers 'heights' representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram. (See figure)
-> While traversing the arr, max. height of rect which includes heights[i] = heights[i]; now the widht of this rectangle will be equal to how much can we extend it , ie, we can extend a rectangle of height = heights[i] (from heights[i]) in right side untill we encounter a bar with heights[j] < heights[i]; similarly on the left side, we can extend it untill we encounter a bar with heights[k] < heights[i]; So we need to find k & j (ie, width = j-k-1); ie, for each bar, we need to find pse(prev. smaller element) index(ie, k) & nse(next smaller element) index(ie, j). 
We use stack & vector<int> pse(n,-1) and traverse heights[i] l->r; while (!st.empty() && heights[i] < heights[st.top()]) st.pop(); if(!st.empty()) pse[i] = st.top(); (else pse[i] = -1, ie, default val).
similarly, vector<int> nse(n,n) & traverse r->l. now traverse l->r and ans = max(ans, heights[i] * (nse[i] - pse[i] - 1)); TC: O(n), SC: O(n)

(20) Generate Parentheses: 

...........................................................................................................

                BINARY SEARCH:

(21) 


